package org.tempuri;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 2.4.1
 * 2011-12-08T19:01:15.890+08:00
 * Generated source version: 2.4.1
 * 
 */
@WebServiceClient(name = "TunnelService", 
                  wsdlLocation = "http://11.11.40.20:9933/mw/TunnelService.asmx?wsdl",
                  targetNamespace = "http://tempuri.org/") 
public class TunnelService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://tempuri.org/", "TunnelService");
    public final static QName TunnelServiceSoap12 = new QName("http://tempuri.org/", "TunnelServiceSoap12");
    public final static QName TunnelServiceSoap = new QName("http://tempuri.org/", "TunnelServiceSoap");
    public final static QName TunnelServiceHttpPost = new QName("http://tempuri.org/", "TunnelServiceHttpPost");
    public final static QName TunnelServiceHttpGet = new QName("http://tempuri.org/", "TunnelServiceHttpGet");
    static {
        URL url = null;
        try {
            url = new URL("http://11.11.40.20:9933/mw/TunnelService.asmx?wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(TunnelService.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "http://11.11.40.20:9933/mw/TunnelService.asmx?wsdl");
        }
        WSDL_LOCATION = url;
    }

    public TunnelService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public TunnelService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public TunnelService() {
        super(WSDL_LOCATION, SERVICE);
    }
    

    /**
     *
     * @return
     *     returns TunnelServiceSoap
     */
    @WebEndpoint(name = "TunnelServiceSoap12")
    public TunnelServiceSoap getTunnelServiceSoap12() {
        return super.getPort(TunnelServiceSoap12, TunnelServiceSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns TunnelServiceSoap
     */
    @WebEndpoint(name = "TunnelServiceSoap12")
    public TunnelServiceSoap getTunnelServiceSoap12(WebServiceFeature... features) {
        return super.getPort(TunnelServiceSoap12, TunnelServiceSoap.class, features);
    }
    /**
     *
     * @return
     *     returns TunnelServiceSoap
     */
    @WebEndpoint(name = "TunnelServiceSoap")
    public TunnelServiceSoap getTunnelServiceSoap() {
        return super.getPort(TunnelServiceSoap, TunnelServiceSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns TunnelServiceSoap
     */
    @WebEndpoint(name = "TunnelServiceSoap")
    public TunnelServiceSoap getTunnelServiceSoap(WebServiceFeature... features) {
        return super.getPort(TunnelServiceSoap, TunnelServiceSoap.class, features);
    }
    /**
     *
     * @return
     *     returns TunnelServiceHttpPost
     */
    @WebEndpoint(name = "TunnelServiceHttpPost")
    public TunnelServiceHttpPost getTunnelServiceHttpPost() {
        return super.getPort(TunnelServiceHttpPost, TunnelServiceHttpPost.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns TunnelServiceHttpPost
     */
    @WebEndpoint(name = "TunnelServiceHttpPost")
    public TunnelServiceHttpPost getTunnelServiceHttpPost(WebServiceFeature... features) {
        return super.getPort(TunnelServiceHttpPost, TunnelServiceHttpPost.class, features);
    }
    /**
     *
     * @return
     *     returns TunnelServiceHttpGet
     */
    @WebEndpoint(name = "TunnelServiceHttpGet")
    public TunnelServiceHttpGet getTunnelServiceHttpGet() {
        return super.getPort(TunnelServiceHttpGet, TunnelServiceHttpGet.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns TunnelServiceHttpGet
     */
    @WebEndpoint(name = "TunnelServiceHttpGet")
    public TunnelServiceHttpGet getTunnelServiceHttpGet(WebServiceFeature... features) {
        return super.getPort(TunnelServiceHttpGet, TunnelServiceHttpGet.class, features);
    }

}
